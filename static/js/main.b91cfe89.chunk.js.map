{"version":3,"sources":["Components/MatchCity.jsx","App.js","reportWebVitals.js","index.js"],"names":["MatchCity","state","cityname","zipcode","handleChange","bind","e","cityInput","target","value","toUpperCase","url","axios","get","then","res","response","data","zipArr","i","push","setState","catch","console","error","className","name","type","onChange","this","map","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAoDeA,E,kDAhDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,KACVC,QAAS,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANR,E,yDASDC,GAAI,IAAD,OAEVC,EADWD,EAAEE,OAAOC,MACCC,cAEnBC,EAAG,gDAA4CJ,GACrDK,IACGC,IAAIF,GACJG,MAAK,SAACC,GACL,IAAMC,EAAWD,EAAIE,KACjBC,EAAS,GACb,IAAK,IAAMC,KAAKH,EACdE,EAAOE,KAAKJ,EAASG,IAGvB,EAAKE,SAAS,CACZlB,QAASe,OAGZI,MAAMC,QAAQC,W,+BAGjB,OACE,sBAAKC,UAAU,MAAf,UACE,mDACA,uBAAOC,KAAK,WAAZ,yBAIA,uBAAOC,KAAK,OAAOD,KAAK,UAAUE,SAAUC,KAAKzB,eACjD,oBAAIqB,UAAU,aAAd,SACGI,KAAK5B,MAAME,QAAQ2B,KAAI,SAAC3B,EAASgB,GAAV,OACtB,6BAAahB,GAAJgB,e,GAzCGY,aCYTC,E,uKARX,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUM,aCOHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b91cfe89.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass MatchCity extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cityname: null,\n      zipcode: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let cityname = e.target.value;\n    let cityInput = cityname.toUpperCase();\n\n    const url = `http://ctp-zip-api.herokuapp.com/city/${cityInput}`;\n    axios\n      .get(url)\n      .then((res) => {\n        const response = res.data;\n        let zipArr = [];\n        for (const i in response) {\n          zipArr.push(response[i]);\n        }\n\n        this.setState({\n          zipcode: zipArr,\n        });\n      })\n      .catch(console.error());\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> City name Search</h1>\n        <label name=\"citymane\"> City Name:</label>\n        {/* <input name=\"cityname\" placeholder=\"New York\" value={this.state.cityname} onChange={this.handleChange}/>\n              <button  onClick={(e)=>{if(e.key === 'Enter') this.componentDidMount()}}>Search</button> */}\n        {/* <MatchCity cityname={this.state.result}/> */}\n        <input type=\"text\" name=\"zipcode\" onChange={this.handleChange}></input>\n        <ul className=\"no-bullets\">\n          {this.state.zipcode.map((zipcode, i) => (\n            <li key={i}>{zipcode}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default MatchCity;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport \"./Components/MatchCity.css\";\nimport MatchCity from \"./Components/MatchCity\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MatchCity />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}